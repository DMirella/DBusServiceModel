/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201801251438.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/luxoft/calculatorservice/CalculatorServiceDBusProxy.hpp>

namespace v1 {
namespace com {
namespace luxoft {
namespace calculatorservice {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createCalculatorServiceDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
    return std::make_shared< CalculatorServiceDBusProxy>(_address, _connection);
}

void initializeCalculatorServiceDBusProxy() {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
        CalculatorService::getInterface(),
        &createCalculatorServiceDBusProxy);
}

INITIALIZER(registerCalculatorServiceDBusProxy) {
    CommonAPI::DBus::Factory::get()->registerInterface(initializeCalculatorServiceDBusProxy);
}

CalculatorServiceDBusProxy::CalculatorServiceDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
    :   CommonAPI::DBus::DBusProxy(_address, _connection)
{
}



    void CalculatorServiceDBusProxy::sum(const int32_t &_valueA, const int32_t &_valueB, CommonAPI::CallStatus &_internalCallStatus, int32_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueA(_valueA, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueB(_valueB, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_result(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >,
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodWithReply(
        *this,
        "sum",
        "ii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_valueA, deploy_valueB,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> CalculatorServiceDBusProxy::sumAsync(const int32_t &_valueA, const int32_t &_valueB, SumAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueA(_valueA, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueB(_valueB, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_result(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >,
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodAsync(
        *this,
        "sum",
        "ii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_valueA, deploy_valueB,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment > _result) {
            if (_callback)
                _callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    void CalculatorServiceDBusProxy::deduct(const int32_t &_valueA, const int32_t &_valueB, CommonAPI::CallStatus &_internalCallStatus, int32_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueA(_valueA, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueB(_valueB, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_result(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >,
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodWithReply(
        *this,
        "deduct",
        "ii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_valueA, deploy_valueB,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> CalculatorServiceDBusProxy::deductAsync(const int32_t &_valueA, const int32_t &_valueB, DeductAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueA(_valueA, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueB(_valueB, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_result(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >,
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodAsync(
        *this,
        "deduct",
        "ii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_valueA, deploy_valueB,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment > _result) {
            if (_callback)
                _callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    void CalculatorServiceDBusProxy::multiply(const int32_t &_valueA, const int32_t &_valueB, CommonAPI::CallStatus &_internalCallStatus, int32_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueA(_valueA, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueB(_valueB, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_result(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >,
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodWithReply(
        *this,
        "multiply",
        "ii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_valueA, deploy_valueB,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> CalculatorServiceDBusProxy::multiplyAsync(const int32_t &_valueA, const int32_t &_valueB, MultiplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueA(_valueA, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueB(_valueB, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_result(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >,
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodAsync(
        *this,
        "multiply",
        "ii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_valueA, deploy_valueB,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment > _result) {
            if (_callback)
                _callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    void CalculatorServiceDBusProxy::divide(const int32_t &_valueA, const int32_t &_valueB, CommonAPI::CallStatus &_internalCallStatus, int32_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueA(_valueA, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueB(_valueB, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_result(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >,
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodWithReply(
        *this,
        "divide",
        "ii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_valueA, deploy_valueB,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> CalculatorServiceDBusProxy::divideAsync(const int32_t &_valueA, const int32_t &_valueB, DivideAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueA(_valueA, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_valueB(_valueB, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_result(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >,
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodAsync(
        *this,
        "divide",
        "ii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_valueA, deploy_valueB,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment > _result) {
            if (_callback)
                _callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }


void CalculatorServiceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace calculatorservice
      } // namespace luxoft
      } // namespace com
      } // namespace v1
