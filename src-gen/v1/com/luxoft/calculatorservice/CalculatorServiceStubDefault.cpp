/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201801251447.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/luxoft/calculatorservice/CalculatorServiceStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace com {
namespace luxoft {
namespace calculatorservice {

CalculatorServiceStubDefault::CalculatorServiceStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(CalculatorService::getInterfaceVersion()) {
}

const CommonAPI::Version& CalculatorServiceStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

CalculatorServiceStubRemoteEvent* CalculatorServiceStubDefault::initStubAdapter(const std::shared_ptr< CalculatorServiceStubAdapter> &_adapter) {
    CommonAPI::Stub<CalculatorServiceStubAdapter, CalculatorServiceStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


void CalculatorServiceStubDefault::sum(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _valueA, int32_t _valueB, sumReply_t _reply) {
    (void)_client;
    (void)_valueA;
    (void)_valueB;
    int32_t result = 0;
    _reply(result);
}

void CalculatorServiceStubDefault::deduct(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _valueA, int32_t _valueB, deductReply_t _reply) {
    (void)_client;
    (void)_valueA;
    (void)_valueB;
    int32_t result = 0;
    _reply(result);
}

void CalculatorServiceStubDefault::multiply(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _valueA, int32_t _valueB, multiplyReply_t _reply) {
    (void)_client;
    (void)_valueA;
    (void)_valueB;
    int32_t result = 0;
    _reply(result);
}

void CalculatorServiceStubDefault::divide(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _valueA, int32_t _valueB, divideReply_t _reply) {
    (void)_client;
    (void)_valueA;
    (void)_valueB;
    int32_t result = 0;
    _reply(result);
}




CalculatorServiceStubDefault::RemoteEventHandler::RemoteEventHandler(CalculatorServiceStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace calculatorservice
} // namespace luxoft
} // namespace com
} // namespace v1
